<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>walsky&#39;s blog</title>
  <subtitle>我转身，发现你们一直在身后，这就是我为什么坚持的原因</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-08-17T09:33:17.868Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>laiwei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Markdown高阶语法手册2</title>
    <link href="http://yoursite.com/2016/08/17/Markdown%E9%AB%98%E9%98%B6%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C2/"/>
    <id>http://yoursite.com/2016/08/17/Markdown高阶语法手册2/</id>
    <published>2016-08-17T07:40:27.296Z</published>
    <updated>2016-08-17T09:33:17.868Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Cmd-Markdown-高阶语法手册&quot;&gt;&lt;a href=&quot;#Cmd-Markdown-高阶语法手册&quot; class=&quot;headerlink&quot; title=&quot;Cmd Markdown 高阶语法手册&quot;&gt;&lt;/a&gt;Cmd Markdown 高阶语法手册&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://o9pxg8pv5.bkt.clouddn.com/markdownicon.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-内容目录&quot;&gt;&lt;a href=&quot;#1-内容目录&quot; class=&quot;headerlink&quot; title=&quot;1. 内容目录&quot;&gt;&lt;/a&gt;1. 内容目录&lt;/h3&gt;&lt;p&gt;在段落中填写 &lt;code&gt;[TOC]&lt;/code&gt; 以显示全文内容的目录结构。&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;2-标签分类&quot;&gt;&lt;a href=&quot;#2-标签分类&quot; class=&quot;headerlink&quot; title=&quot;2. 标签分类&quot;&gt;&lt;/a&gt;2. 标签分类&lt;/h3&gt;&lt;p&gt;在编辑区任意行的列首位置输入以下代码给文稿标签：&lt;/p&gt;
&lt;p&gt;标签： 数学 英语 Markdown&lt;/p&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;p&gt;Tags： 数学 英语 Markdown&lt;/p&gt;
&lt;h3 id=&quot;3-删除线&quot;&gt;&lt;a href=&quot;#3-删除线&quot; class=&quot;headerlink&quot; title=&quot;3. 删除线&quot;&gt;&lt;/a&gt;3. 删除线&lt;/h3&gt;&lt;p&gt;使用 ~~ 表示删除线。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;这是一段错误的文本。&lt;/del&gt;&lt;/p&gt;
&lt;h3 id=&quot;4-注脚&quot;&gt;&lt;a href=&quot;#4-注脚&quot; class=&quot;headerlink&quot; title=&quot;4. 注脚&quot;&gt;&lt;/a&gt;4. 注脚&lt;/h3&gt;&lt;p&gt;使用 [^keyword] 表示注脚。&lt;/p&gt;
&lt;p&gt;这是一个注脚[^footnote]的样例。&lt;/p&gt;
&lt;p&gt;这是第二个注脚[^footnote2]的样例。&lt;/p&gt;
&lt;h3 id=&quot;5-LaTeX-公式&quot;&gt;&lt;a href=&quot;#5-LaTeX-公式&quot; class=&quot;headerlink&quot; title=&quot;5. LaTeX 公式&quot;&gt;&lt;/a&gt;5. LaTeX 公式&lt;/h3&gt;&lt;p&gt;$ 表示行内公式：&lt;/p&gt;
&lt;p&gt;质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。&lt;/p&gt;
&lt;p&gt;$$ 表示整行公式：&lt;/p&gt;
&lt;p&gt;$$\sum_{i=1}^n a_i=0$$&lt;/p&gt;
&lt;p&gt;$$f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2 $$&lt;/p&gt;
&lt;p&gt;$$\sum^{j-1}&lt;em&gt;{k=0}{\widehat{\gamma}&lt;/em&gt;{kj} z_k}$$&lt;/p&gt;
&lt;p&gt;访问 &lt;a href=&quot;http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MathJax&lt;/a&gt; 参考更多使用方法。&lt;/p&gt;
&lt;h3 id=&quot;6-加强的代码块&quot;&gt;&lt;a href=&quot;#6-加强的代码块&quot; class=&quot;headerlink&quot; title=&quot;6. 加强的代码块&quot;&gt;&lt;/a&gt;6. 加强的代码块&lt;/h3&gt;&lt;p&gt;支持四十一种编程语言的语法高亮的显示，行号显示。&lt;/p&gt;
&lt;p&gt;非代码示例：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo apt-get install vim-gnome&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Python 示例：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@requires_authorization&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;somefunc&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(param1=&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;, param2=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;&#39;&#39;A docstring&#39;&#39;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; param1 &amp;gt; param2: &lt;span class=&quot;comment&quot;&gt;# interesting&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Greater&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (param2 - param1 + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SomeClass&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;message = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&#39;interpreter&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;prompt&#39;&#39;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;JavaScript 示例：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* nth element in the fibonacci series.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* @param n &amp;gt;= 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* @return the nth element, &amp;gt;= 0.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fib&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;n&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, b = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (--n &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tmp = a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a += b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    b = tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.write(fib(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;7-流程图&quot;&gt;&lt;a href=&quot;#7-流程图&quot; class=&quot;headerlink&quot; title=&quot;7. 流程图&quot;&gt;&lt;/a&gt;7. 流程图&lt;/h3&gt;&lt;h4 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;st=&amp;gt;start: Start:&amp;gt;https://www.zybuluo.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;io=&amp;gt;inputoutput: verification&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;op=&amp;gt;operation: Your Operation&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cond=&amp;gt;condition: Yes or No?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sub=&amp;gt;subroutine: Your Subroutine&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;e=&amp;gt;end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;st-&amp;gt;io-&amp;gt;op-&amp;gt;cond&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cond(yes)-&amp;gt;e&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cond(no)-&amp;gt;sub-&amp;gt;io&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;更多语法参考：流程图语法参考&quot;&gt;&lt;a href=&quot;#更多语法参考：流程图语法参考&quot; class=&quot;headerlink&quot; title=&quot;更多语法参考：流程图语法参考&quot;&gt;&lt;/a&gt;更多语法参考：&lt;a href=&quot;http://adrai.github.io/flowchart.js/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;流程图语法参考&lt;/a&gt;&lt;/h4&gt;&lt;h3 id=&quot;8-序列图&quot;&gt;&lt;a href=&quot;#8-序列图&quot; class=&quot;headerlink&quot; title=&quot;8. 序列图&quot;&gt;&lt;/a&gt;8. 序列图&lt;/h3&gt;&lt;h4 id=&quot;示例-1&quot;&gt;&lt;a href=&quot;#示例-1&quot; class=&quot;headerlink&quot; title=&quot;示例 1&quot;&gt;&lt;/a&gt;示例 1&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Alice-&amp;gt;Bob: Hello Bob, how are you?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Note right of Bob: Bob thinks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Bob--&amp;gt;Alice: I am good thanks!&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;示例-2&quot;&gt;&lt;a href=&quot;#示例-2&quot; class=&quot;headerlink&quot; title=&quot;示例 2&quot;&gt;&lt;/a&gt;示例 2&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Title: Here is a title&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;A-&amp;gt;B: Normal line&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;B--&amp;gt;C: Dashed line&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;C-&amp;gt;&amp;gt;D: Open arrow&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;D--&amp;gt;&amp;gt;A: Dashed open arrow&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;更多语法参考：序列图语法参考&quot;&gt;&lt;a href=&quot;#更多语法参考：序列图语法参考&quot; class=&quot;headerlink&quot; title=&quot;更多语法参考：序列图语法参考&quot;&gt;&lt;/a&gt;更多语法参考：&lt;a href=&quot;http://bramp.github.io/js-sequence-diagrams/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;序列图语法参考&lt;/a&gt;&lt;/h4&gt;&lt;h3 id=&quot;9-表格支持&quot;&gt;&lt;a href=&quot;#9-表格支持&quot; class=&quot;headerlink&quot; title=&quot;9. 表格支持&quot;&gt;&lt;/a&gt;9. 表格支持&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th style=&quot;text-align:right&quot;&gt;价格&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;数量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;计算机&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;\$1600&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;手机&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;\$12&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;管线&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;\$1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;234&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;10-定义型列表&quot;&gt;&lt;a href=&quot;#10-定义型列表&quot; class=&quot;headerlink&quot; title=&quot;10. 定义型列表&quot;&gt;&lt;/a&gt;10. 定义型列表&lt;/h3&gt;&lt;p&gt;名词 1&lt;br&gt;:   定义 1（左侧有一个可见的冒号和四个不可见的空格）&lt;/p&gt;
&lt;p&gt;代码块 2&lt;br&gt;:   这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;代码块（左侧有八个不可见的空格）
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;11-Html-标签&quot;&gt;&lt;a href=&quot;#11-Html-标签&quot; class=&quot;headerlink&quot; title=&quot;11. Html 标签&quot;&gt;&lt;/a&gt;11. Html 标签&lt;/h3&gt;&lt;p&gt;本站支持在 Markdown 语法中嵌套 Html 标签，譬如，你可以用 Html 写一个纵跨两行的表格：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;table&amp;gt;
    &amp;lt;tr&amp;gt;
        &amp;lt;th rowspan=&amp;quot;2&amp;quot;&amp;gt;值班人员&amp;lt;/th&amp;gt;
        &amp;lt;th&amp;gt;星期一&amp;lt;/th&amp;gt;
        &amp;lt;th&amp;gt;星期二&amp;lt;/th&amp;gt;
        &amp;lt;th&amp;gt;星期三&amp;lt;/th&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;tr&amp;gt;
        &amp;lt;td&amp;gt;李强&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;张明&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;王平&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;table&gt;&lt;br&gt;    &lt;tr&gt;&lt;br&gt;        &lt;th rowspan=&quot;2&quot;&gt;值班人员&lt;/th&gt;&lt;br&gt;        &lt;th&gt;星期一&lt;/th&gt;&lt;br&gt;        &lt;th&gt;星期二&lt;/th&gt;&lt;br&gt;        &lt;th&gt;星期三&lt;/th&gt;&lt;br&gt;    &lt;/tr&gt;&lt;br&gt;    &lt;tr&gt;&lt;br&gt;        &lt;td&gt;李强&lt;/td&gt;&lt;br&gt;        &lt;td&gt;张明&lt;/td&gt;&lt;br&gt;        &lt;td&gt;王平&lt;/td&gt;&lt;br&gt;    &lt;/tr&gt;&lt;br&gt;&lt;/table&gt;

&lt;h3 id=&quot;12-内嵌图标&quot;&gt;&lt;a href=&quot;#12-内嵌图标&quot; class=&quot;headerlink&quot; title=&quot;12. 内嵌图标&quot;&gt;&lt;/a&gt;12. 内嵌图标&lt;/h3&gt;&lt;p&gt;本站的图标系统对外开放，在文档中输入&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;i class=&amp;quot;icon-weibo&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;即显示微博的图标： &lt;i class=&quot;icon-weibo icon-2x&quot;&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;替换 上述 &lt;code&gt;i 标签&lt;/code&gt; 内的 &lt;code&gt;icon-weibo&lt;/code&gt; 以显示不同的图标，例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;i class=&amp;quot;icon-renren&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;即显示人人的图标： &lt;i class=&quot;icon-renren icon-2x&quot;&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;更多的图标和玩法可以参看 &lt;a href=&quot;http://fortawesome.github.io/Font-Awesome/3.2.1/icons/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;font-awesome&lt;/a&gt; 官方网站。&lt;/p&gt;
&lt;h3 id=&quot;13-待办事宜-Todo-列表&quot;&gt;&lt;a href=&quot;#13-待办事宜-Todo-列表&quot; class=&quot;headerlink&quot; title=&quot;13. 待办事宜 Todo 列表&quot;&gt;&lt;/a&gt;13. 待办事宜 Todo 列表&lt;/h3&gt;&lt;p&gt;使用带有 [ ] 或 [x] （未完成或已完成）项的列表语法撰写一个待办事宜列表，并且支持子列表嵌套以及混用Markdown语法，例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- [ ] **Cmd Markdown 开发**
    - [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率
    - [ ] 支持以 PDF 格式导出文稿
    - [x] 新增Todo列表功能 [语法参考](https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments)
    - [x] 改进 LaTex 功能
        - [x] 修复 LaTex 公式渲染问题
        - [x] 新增 LaTex 公式编号功能 [语法参考](http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers)
- [ ] **七月旅行准备**
    - [ ] 准备邮轮上需要携带的物品
    - [ ] 浏览日本免税店的物品
    - [x] 购买蓝宝石公主号七月一日的船票
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对应显示如下待办事宜 Todo 列表：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[ ] &lt;strong&gt;Cmd Markdown 开发&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;[ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率&lt;/li&gt;
&lt;li&gt;[ ] 支持以 PDF 格式导出文稿&lt;/li&gt;
&lt;li&gt;[x] 新增Todo列表功能 &lt;a href=&quot;https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;语法参考&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[x] 改进 LaTex 功能&lt;ul&gt;
&lt;li&gt;[x] 修复 LaTex 公式渲染问题&lt;/li&gt;
&lt;li&gt;[x] 新增 LaTex 公式编号功能 &lt;a href=&quot;http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;语法参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;strong&gt;七月旅行准备&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;[ ] 准备邮轮上需要携带的物品&lt;/li&gt;
&lt;li&gt;[ ] 浏览日本免税店的物品&lt;/li&gt;
&lt;li&gt;[x] 购买蓝宝石公主号七月一日的船票&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[^footnote]: 这是一个 &lt;em&gt;注脚&lt;/em&gt; 的 &lt;strong&gt;文本&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;[^footnote2]: 这是另一个 &lt;em&gt;注脚&lt;/em&gt; 的 &lt;strong&gt;文本&lt;/strong&gt;。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Cmd-Markdown-高阶语法手册&quot;&gt;&lt;a href=&quot;#Cmd-Markdown-高阶语法手册&quot; class=&quot;headerlink&quot; title=&quot;Cmd Markdown 高阶语法手册&quot;&gt;&lt;/a&gt;Cmd Markdown 高阶语法手册&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://o9pxg8pv5.bkt.clouddn.com/markdownicon.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-内容目录&quot;&gt;&lt;a href=&quot;#1-内容目录&quot; class=&quot;headerlink&quot; title=&quot;1. 内容目录&quot;&gt;&lt;/a&gt;1. 内容目录&lt;/h3&gt;&lt;p&gt;在段落中填写 &lt;code&gt;[TOC]&lt;/code&gt; 以显示全文内容的目录结构。&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;2-标签分类&quot;&gt;&lt;a href=&quot;#2-标签分类&quot; class=&quot;headerlink&quot; title=&quot;2. 标签分类&quot;&gt;&lt;/a&gt;2. 标签分类&lt;/h3&gt;&lt;p&gt;在编辑区任意行的列首位置输入以下代码给文稿标签：&lt;/p&gt;
&lt;p&gt;标签： 数学 英语 Markdown&lt;/p&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;p&gt;Tags： 数学 英语 Markdown&lt;/p&gt;
&lt;h3 id=&quot;3-删除线&quot;&gt;&lt;a href=&quot;#3-删除线&quot; class=&quot;headerlink&quot; title=&quot;3. 删除线&quot;&gt;&lt;/a&gt;3. 删除线&lt;/h3&gt;&lt;p&gt;使用 ~~ 表示删除线。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;这是一段错误的文本。&lt;/del&gt;&lt;/p&gt;
&lt;h3 id=&quot;4-注脚&quot;&gt;&lt;a href=&quot;#4-注脚&quot; class=&quot;headerlink&quot; title=&quot;4. 注脚&quot;&gt;&lt;/a&gt;4. 注脚&lt;/h3&gt;&lt;p&gt;使用 [^keyword] 表示注脚。&lt;/p&gt;
&lt;p&gt;这是一个注脚[^footnote]的样例。&lt;/p&gt;
&lt;p&gt;这是第二个注脚[^footnote2]的样例。&lt;/p&gt;
&lt;h3 id=&quot;5-LaTeX-公式&quot;&gt;&lt;a href=&quot;#5-LaTeX-公式&quot; class=&quot;headerlink&quot; title=&quot;5. LaTeX 公式&quot;&gt;&lt;/a&gt;5. LaTeX 公式&lt;/h3&gt;&lt;p&gt;$ 表示行内公式：&lt;/p&gt;
&lt;p&gt;质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。&lt;/p&gt;
&lt;p&gt;$$ 表示整行公式：&lt;/p&gt;
&lt;p&gt;$$\sum_{i=1}^n a_i=0$$&lt;/p&gt;
&lt;p&gt;$$f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2 $$&lt;/p&gt;
&lt;p&gt;$$\sum^{j-1}&lt;em&gt;{k=0}{\widehat{\gamma}&lt;/em&gt;{kj} z_k}$$&lt;/p&gt;
&lt;p&gt;访问 &lt;a href=&quot;http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference&quot;&gt;MathJax&lt;/a&gt; 参考更多使用方法。&lt;/p&gt;
&lt;h3 id=&quot;6-加强的代码块&quot;&gt;&lt;a href=&quot;#6-加强的代码块&quot; class=&quot;headerlink&quot; title=&quot;6. 加强的代码块&quot;&gt;&lt;/a&gt;6. 加强的代码块&lt;/h3&gt;&lt;p&gt;支持四十一种编程语言的语法高亮的显示，行号显示。&lt;/p&gt;
&lt;p&gt;非代码示例：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo apt-get install vim-gnome&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Python 示例：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@requires_authorization&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;somefunc&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(param1=&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;, param2=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;&#39;&#39;A docstring&#39;&#39;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; param1 &amp;gt; param2: &lt;span class=&quot;comment&quot;&gt;# interesting&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Greater&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (param2 - param1 + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SomeClass&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;message = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&#39;interpreter&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;prompt&#39;&#39;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;JavaScript 示例：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* nth element in the fibonacci series.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* @param n &amp;gt;= 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* @return the nth element, &amp;gt;= 0.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fib&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;n&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, b = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (--n &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tmp = a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a += b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    b = tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.write(fib(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Markdown语法" scheme="http://yoursite.com/categories/Markdown%E8%AF%AD%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Markdown简明语法手册1</title>
    <link href="http://yoursite.com/2016/08/17/Markdown%E7%AE%80%E6%98%8E%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C1/"/>
    <id>http://yoursite.com/2016/08/17/Markdown简明语法手册1/</id>
    <published>2016-08-17T02:55:22.052Z</published>
    <updated>2016-08-17T07:37:50.371Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Cmd-Markdown-简明语法手册&quot;&gt;&lt;a href=&quot;#Cmd-Markdown-简明语法手册&quot; class=&quot;headerlink&quot; title=&quot;Cmd Markdown 简明语法手册&quot;&gt;&lt;/a&gt;Cmd Markdown 简明语法手册&lt;/h1&gt;&lt;p&gt;标签： Cmd-Markdown&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;1-斜体和粗体&quot;&gt;&lt;a href=&quot;#1-斜体和粗体&quot; class=&quot;headerlink&quot; title=&quot;1. 斜体和粗体&quot;&gt;&lt;/a&gt;1. 斜体和粗体&lt;/h3&gt;&lt;p&gt;使用 &lt;em&gt; 和 *&lt;/em&gt; 表示斜体和粗体。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;p&gt;这是 &lt;em&gt;斜体&lt;/em&gt;，这是 &lt;strong&gt;粗体&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;2-分级标题&quot;&gt;&lt;a href=&quot;#2-分级标题&quot; class=&quot;headerlink&quot; title=&quot;2. 分级标题&quot;&gt;&lt;/a&gt;2. 分级标题&lt;/h3&gt;&lt;p&gt;使用 === 表示一级标题，使用 — 表示二级标题。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;这是一个一级标题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;============================&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;这是一个二级标题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### 这是一个三级标题&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你也可以选择在行首加井号表示不同级别的标题 (H1-H6)，例如：# H1, ## H2, ### H3，#### H4。&lt;/p&gt;
&lt;h3 id=&quot;3-外链接&quot;&gt;&lt;a href=&quot;#3-外链接&quot; class=&quot;headerlink&quot; title=&quot;3. 外链接&quot;&gt;&lt;/a&gt;3. 外链接&lt;/h3&gt;&lt;p&gt;使用 [描述](链接地址) 为文字增加外链接。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;p&gt;这是去往 &lt;a href=&quot;http://ghosertblog.github.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;本人博客&lt;/a&gt; 的链接。&lt;/p&gt;
&lt;h3 id=&quot;4-无序列表&quot;&gt;&lt;a href=&quot;#4-无序列表&quot; class=&quot;headerlink&quot; title=&quot;4. 无序列表&quot;&gt;&lt;/a&gt;4. 无序列表&lt;/h3&gt;&lt;p&gt;使用 *，+，- 表示无序列表。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无序列表项 一&lt;/li&gt;
&lt;li&gt;无序列表项 二&lt;/li&gt;
&lt;li&gt;无序列表项 三&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;5-有序列表&quot;&gt;&lt;a href=&quot;#5-有序列表&quot; class=&quot;headerlink&quot; title=&quot;5. 有序列表&quot;&gt;&lt;/a&gt;5. 有序列表&lt;/h3&gt;&lt;p&gt;使用数字和点表示有序列表。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;有序列表项 一&lt;/li&gt;
&lt;li&gt;有序列表项 二&lt;/li&gt;
&lt;li&gt;有序列表项 三&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;6-文字引用&quot;&gt;&lt;a href=&quot;#6-文字引用&quot; class=&quot;headerlink&quot; title=&quot;6. 文字引用&quot;&gt;&lt;/a&gt;6. 文字引用&lt;/h3&gt;&lt;p&gt;使用 &amp;gt; 表示文字引用。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;野火烧不尽，春风吹又生。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;7-行内代码块&quot;&gt;&lt;a href=&quot;#7-行内代码块&quot; class=&quot;headerlink&quot; title=&quot;7. 行内代码块&quot;&gt;&lt;/a&gt;7. 行内代码块&lt;/h3&gt;&lt;p&gt;使用 `代码` 表示行内代码块。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;p&gt;让我们聊聊 &lt;code&gt;html&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;8-代码块&quot;&gt;&lt;a href=&quot;#8-代码块&quot; class=&quot;headerlink&quot; title=&quot;8.  代码块&quot;&gt;&lt;/a&gt;8.  代码块&lt;/h3&gt;&lt;p&gt;使用 四个缩进空格 表示代码块。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;这是一个代码块，此行左侧有四个不可见的空格。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;9-插入图像&quot;&gt;&lt;a href=&quot;#9-插入图像&quot; class=&quot;headerlink&quot; title=&quot;9.  插入图像&quot;&gt;&lt;/a&gt;9.  插入图像&lt;/h3&gt;&lt;p&gt;使用 ![描述](图片链接地址) 插入图像。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.zybuluo.com/static/img/my_head.jpg&quot; alt=&quot;我的头像&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Cmd-Markdown-简明语法手册&quot;&gt;&lt;a href=&quot;#Cmd-Markdown-简明语法手册&quot; class=&quot;headerlink&quot; title=&quot;Cmd Markdown 简明语法手册&quot;&gt;&lt;/a&gt;Cmd Markdown 简明语法手册&lt;/h1&gt;&lt;p&gt;标签
    
    </summary>
    
      <category term="Markdown语法" scheme="http://yoursite.com/categories/Markdown%E8%AF%AD%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux学习笔记1</title>
    <link href="http://yoursite.com/2016/08/13/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
    <id>http://yoursite.com/2016/08/13/Linux学习笔记1/</id>
    <published>2016-08-13T13:04:33.039Z</published>
    <updated>2016-08-13T14:19:29.257Z</updated>
    
    <content type="html">&lt;p&gt;####如何学习&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;学习心态&lt;br&gt;明确目的：你是要用 Linux 来干什么，搭建服务器，做程序开发，还是日常办公，还是娱乐游戏；&lt;br&gt;面对现实：Linux 大都在命令行下操作，能否接受不用或少用图形界面；&lt;br&gt;是学习 Linux 操作系统本身还是某一个Linux发行版（&lt;a href=&quot;http://www.ubuntu.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ubuntu&lt;/a&gt;,&lt;a href=&quot;http://www.centos.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CentOS&lt;/a&gt;,&lt;a href=&quot;http://fedoraproject.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fedora&lt;/a&gt;,&lt;a href=&quot;http://www.opensuse.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OpenSUSE&lt;/a&gt;,&lt;a href=&quot;http://www.debian.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Debian&lt;/a&gt;,&lt;a href=&quot;http://linuxmint.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mint&lt;/a&gt; 等等）,如果你对发行版的概念或者它们之间的关系不明确的话可以参看&lt;a href=&quot;http://baike.baidu.com/view/897468.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Linux 发行版&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;学习路径(注重基础，重头开始)&lt;br&gt;&lt;img src=&quot;https://dn-anything-about-doc.qbox.me/linux_base/1-8.png/logoblackfont&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h6 id=&quot;Linux严格区分大小写&quot;&gt;&lt;a href=&quot;#Linux严格区分大小写&quot; class=&quot;headerlink&quot; title=&quot;Linux严格区分大小写&quot;&gt;&lt;/a&gt;Linux严格区分大小写&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;Linux不靠扩展名区分文件类型（靠文件的权限来区分文件类型）&lt;/li&gt;
&lt;li&gt;&lt;em&gt;.rpm 二进制软件包 &lt;/em&gt;.sh(脚本文件,可执行文件)， *.conf（配置文件）&lt;/li&gt;
&lt;li&gt;Linux中所有内容以文件方式保存，包括硬件、用户（一切东西皆是文件）&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&quot;Linux-domain&quot;&gt;&lt;a href=&quot;#Linux-domain&quot; class=&quot;headerlink&quot; title=&quot;Linux domain&quot;&gt;&lt;/a&gt;Linux domain&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;字符界面占用资源更少，出错被攻击概率小&lt;/li&gt;
&lt;li&gt;domainn service域名服务&lt;br&gt;whois domain获取domain的whois信息&lt;br&gt;dig domain 获取domain的DNS信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&quot;Linux版本&quot;&gt;&lt;a href=&quot;#Linux版本&quot; class=&quot;headerlink&quot; title=&quot;Linux版本&quot;&gt;&lt;/a&gt;Linux版本&lt;/h6&gt;&lt;p&gt; 一个典型的Linux发行版包括：&lt;a href=&quot;http://baike.baidu.com/view/573460.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Linux内核&lt;/a&gt;，一些&lt;a href=&quot;http://baike.baidu.com/view/36272.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GNU&lt;/a&gt;&lt;a href=&quot;http://baike.baidu.com/view/421066.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;程序库&lt;/a&gt;和工具，命令行shell，图形界面的&lt;a href=&quot;http://baike.baidu.com/view/398752.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;X Window&lt;/a&gt;系统和相应的&lt;a href=&quot;http://baike.baidu.com/view/2319495.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;桌面环境&lt;/a&gt;，如&lt;a href=&quot;http://baike.baidu.com/view/281881.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;KDE&lt;/a&gt;或&lt;a href=&quot;http://baike.baidu.com/view/281766.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GNOME&lt;/a&gt;，并包含数千种从[办公套件]，[编译器]，[文本编辑器]:到科学工具的应用软件。&lt;br&gt;格来讲，Linux这个词本身只表示Linux内核，但在实际上人们已经习惯了用Linux来形容整个基于Linux内核，并且使用GNU 工程各种工具和数据库的操作系统&lt;/p&gt;
&lt;h6 id=&quot;linux桌面环境介绍&quot;&gt;&lt;a href=&quot;#linux桌面环境介绍&quot; class=&quot;headerlink&quot; title=&quot;linux桌面环境介绍&quot;&gt;&lt;/a&gt;linux桌面环境介绍&lt;/h6&gt;&lt;p&gt;LInux/unix本身没有图形化界面，我们看到的图形化界面是运行在linux系统上的一套软件，这套软件现在是xorg(X本身只是工具包和架构协议，xorg是实现了x协议规范并提供图形用户界面服务的服务器)，就像实现了HTTP协议提供web服务的Apach,如果只有服务器是不可能实现完整的桌面环境的，还需要一个客户端X client，最流行实现桌面客户端服务的客户端有KDE,GNOME,LXDE,XFCE,实验楼是XFCE&lt;br&gt;&lt;img src=&quot;https://dn-anything-about-doc.qbox.me/linux_base/2-1.png/logoblackfont&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h6 id=&quot;终端-Terminal&quot;&gt;&lt;a href=&quot;#终端-Terminal&quot; class=&quot;headerlink&quot; title=&quot;终端(Terminal)&quot;&gt;&lt;/a&gt;终端(Terminal)&lt;/h6&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在使用Linux系统时，我们不是直接与Linux系统本身打交道，而是通过Shell(命令行解释器)中间程序完成的，Teminal为了在图形化界面接受用户输入和显示输出，几个比较常见的终端模拟器，例如 gnome-terminal，kconsole，xterm，rxvt，kvt，nxterm 和 eterm&lt;br&gt;注意这里说的终端(Termianl)和控制台（termianl）是有区别的&lt;/p&gt;
&lt;p&gt;终端本质上是对应着 Linux 上的 /dev/tty 设备，Linux 的多用户登陆就是通过不同的 /dev/tty 设备完成的，Linux 默认提供了 6 个纯命令行界面的 “terminal”（准确的说这里应该是 6 个 virtual consoles）来让用户登录，在物理机系统上你可以通过使用&lt;code&gt;[Ctrl]+[Alt]+[F1]～[F6]&lt;/code&gt;进行切换，当你切换到其中一个终端后想要切换回图形界面，你可以按下&lt;code&gt;[Ctrl]+[Alt]+[F7]&lt;/code&gt;来完成。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;shell&lt;br&gt;在实际桌面环境的使用过程中，正真带来差异的不是不同发行版本的终端，而是shell(壳)，有核就有壳，shell就是命令行解释器，普通意义上就是接受用户输入命令的程序，它之所以被称作 Shell 是因为它隐藏了操作系统底层的细节。 Unix/Linux 下的图形用户界面 GNOME 和 KDE有时也被叫做“虚拟 shell”或“图形 shell”。&lt;/p&gt;
&lt;p&gt;Unix/Linux 操作系统下的 Shell 既是用户交互的界面，也是控制系统的脚本语言，在 UNIX/Linux 中比较流行的常见的 Shell 有 bash，zsh，ksh，csh 等等，Ubuntu 终端默认使用的是 bash，默认的桌面环境是 GNOME 或者 Unity（基于 GNOME）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id=&quot;重要的快捷键&quot;&gt;&lt;a href=&quot;#重要的快捷键&quot; class=&quot;headerlink&quot; title=&quot;重要的快捷键&quot;&gt;&lt;/a&gt;重要的快捷键&lt;/h6&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;tab&lt;/code&gt; 补全命令，补全路径，补全命令参数&lt;br&gt;(可以一边输入，按tab下面提示，再在上方继续输入)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl+C&lt;/code&gt; 中止退出当前执行命令&lt;br&gt;Python中（ ctrl+C ctrl+z q exit()总有一个是）&lt;/li&gt;
&lt;li&gt;键盘向&lt;code&gt;上&lt;/code&gt;键, 显示历史输入命令，恢复你之前输入过的命令&lt;br&gt;&lt;img src=&quot;http://o9pxg8pv5.bkt.clouddn.com/Linux_keyss.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id=&quot;学习使用通配符&quot;&gt;&lt;a href=&quot;#学习使用通配符&quot; class=&quot;headerlink&quot; title=&quot;学习使用通配符&quot;&gt;&lt;/a&gt;学习使用通配符&lt;/h6&gt;&lt;p&gt;通配符是一种特殊语句，主要有星号和问号（?），用来对对字符串进行模糊匹配（比如文件名，参数名）。当查找文件夹时，可以使用它来代替一个或多个真正字符；当不知道真正字符或者懒得输入完整名字时，常常使用通配符代替一个或多个真正的字符。 &lt;strong&gt;通配符&lt;/strong&gt; 实际上就是一种 Shell 实现的路径扩展功能。在 通配符被处理后, Shell 会先完成该命令的重组，然后再继续处理重组后的命令，直至执行该命令&lt;/p&gt;
&lt;p&gt;终端里面输入的通配符是由 Shell 处理的，不是由所涉及到命令语句处理的，它只会出现在命令的“参数值”里（它不用在 命令名称里）。当 Shell 在“参数值”中遇到了通配符时，Shell 会将其当作路径或文件名去在磁盘上搜寻可能的匹配：若符合要求的匹配存在，则进行代换(路径扩展)；否则就将该通配符作为一个普通字符传递给“命令”，然后再由命令进行处理。&lt;br&gt;&lt;img src=&quot;http://o9pxg8pv5.bkt.clouddn.com/shell_tongpei.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;######在命令行中获取帮助(其实就是获取在线手册)&lt;br&gt;在 Linux 环境中，如果你遇到困难，可以使用 &lt;code&gt;man&lt;/code&gt; 命令，它是&lt;code&gt;Manual page&lt;/code&gt;的缩写。&lt;/p&gt;
&lt;p&gt;Manual pages 是在 UNIX 或类 UNIX 操作系统在线软件文档的一种普遍的形式。 内容包括计算机程序（包括库和系统调用），正式的标准和惯例，甚至是抽象的概念。用户可以通过执行 man 命令调用手册页。&lt;/p&gt;
&lt;p&gt;你可以使用如下方式来获得某个命令的说明和使用方式的详细介绍：&lt;br&gt;&lt;code&gt;$ man &amp;lt;command_name&amp;gt;&lt;/code&gt;&lt;br&gt;比如你想查看 man 命令本身的使用方式，你可以输入：&lt;br&gt;&lt;code&gt;man man&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;通常情况下，man 手册里面的内容都是英文的，这就要求你有一定的英文基础。man 手册的内容很多，涉及了 Linux 使用过程中的方方面面，为了便于查找，是做了分册（分区段）处理的，在Research UNIX、BSD、OS X 和 Linux 中，手册通常被分为8个区段，安排如下：&lt;br&gt;&lt;img src=&quot;http://o9pxg8pv5.bkt.clouddn.com/linux_shouce.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;要查看相应区段的内容，就在 man 后面加上相应区段的数字即可，如：&lt;br&gt;&lt;code&gt;$ man 1 ls&lt;/code&gt;&lt;br&gt;会显示第一区段中的ls 命令man页面&lt;/p&gt;
&lt;p&gt;所有的手册页遵循一个常见的布局，其为通过简单的 ASCII 文本展示而优化，而这种情况下可能没有任何形式的高亮或字体控制。一般包括以下部分内容：&lt;br&gt;&lt;img src=&quot;http://o9pxg8pv5.bkt.clouddn.com/shouce_des.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o9pxg8pv5.bkt.clouddn.com/shouce_2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h6 id=&quot;apt-get-update和-apt-upgrade的区别&quot;&gt;&lt;a href=&quot;#apt-get-update和-apt-upgrade的区别&quot; class=&quot;headerlink&quot; title=&quot;apt-get update和 apt-upgrade的区别&quot;&gt;&lt;/a&gt;apt-get update和 apt-upgrade的区别&lt;/h6&gt;&lt;p&gt;update是下载源里面的metadata的. 包括这个源有什么包, 每个包什么版本之类的.&lt;br&gt;upgrade是根据update命令下载的metadata决定要更新什么包(同时获取每个包的位置).&lt;br&gt;安装软件之前, 可以不upgrade, 但是要update. 因为旧的信息指向了旧版本的包, 但是源的服务器更新了之后旧的包可能被新的替代了, 于是你会遇到404…&lt;/p&gt;
&lt;p&gt;也就是说：&lt;br&gt;update更新软件包索引，就是告诉包管理器最新的一份源里面的软件包版本信息，upgrade是通常意义的更新软件包。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;####如何学习&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;学习心态&lt;br&gt;明确目的：你是要用 Linux 来干什么，搭建服务器，做程序开发，还是日常办公，还是娱乐游戏；&lt;br&gt;面对现实：Linux 大都在命令行下操作，能否接受不用或少用图形界面；&lt;br&gt;是学习 Linux 操作系统本身还是某一个Linux发行版（&lt;a href=&quot;http://www.ubuntu.com/&quot;&gt;Ubuntu&lt;/a&gt;,&lt;a href=&quot;http://www.centos.org/&quot;&gt;CentOS&lt;/a&gt;,&lt;a href=&quot;http://fedoraproject.org/&quot;&gt;Fedora&lt;/a&gt;,&lt;a href=&quot;http://www.opensuse.org/&quot;&gt;OpenSUSE&lt;/a&gt;,&lt;a href=&quot;http://www.debian.org/&quot;&gt;Debian&lt;/a&gt;,&lt;a href=&quot;http://linuxmint.com/&quot;&gt;Mint&lt;/a&gt; 等等）,如果你对发行版的概念或者它们之间的关系不明确的话可以参看&lt;a href=&quot;http://baike.baidu.com/view/897468.htm&quot;&gt;Linux 发行版&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;学习路径(注重基础，重头开始)&lt;br&gt;&lt;img src=&quot;https://dn-anything-about-doc.qbox.me/linux_base/1-8.png/logoblackfont&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Linux学习" scheme="http://yoursite.com/categories/Linux%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>正则表达式和Python中正则的使用</title>
    <link href="http://yoursite.com/2016/08/07/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8CPython%E4%B8%AD%E6%AD%A3%E5%88%99%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2016/08/07/正则表达式和Python中正则的使用/</id>
    <published>2016-08-07T10:09:32.809Z</published>
    <updated>2016-08-13T14:19:08.502Z</updated>
    
    <content type="html">&lt;h4 id=&quot;正则表达式的概念和用法&quot;&gt;&lt;a href=&quot;#正则表达式的概念和用法&quot; class=&quot;headerlink&quot; title=&quot;正则表达式的概念和用法&quot;&gt;&lt;/a&gt;正则表达式的概念和用法&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;多练习，多使用，才能熟练掌握正则表达式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o9pxg8pv5.bkt.clouddn.com/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h6 id=&quot;参考链接&quot;&gt;&lt;a href=&quot;#参考链接&quot; class=&quot;headerlink&quot; title=&quot;参考链接&quot;&gt;&lt;/a&gt;参考链接&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4MjEyNTA5Mw==&amp;amp;mid=2652563938&amp;amp;idx=2&amp;amp;sn=52881e92c413cca92cdf8b1a9492a30e&amp;amp;scene=23&amp;amp;srcid=0806R6uskwun6yYYK1C8YS2o#rd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Python 正则表达式学习摘要及资料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.parryqiu.com/2015/06/01/regex-lesson/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;正则表达式入门以及高阶视频教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/deerchao/archive/2006/08/24/zhengzhe30fengzhongjiaocheng.html#mission&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;正则表达式30分钟入门教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gold.xitu.io/search&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;掘金&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cuiqingcai.com/977.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Python爬虫入门七之正则表达式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;######基本概念&lt;br&gt;在编写处理字符串的程序或者网页时，需要查找某些复杂规则的字符串。&lt;br&gt;正则表达式： &lt;code&gt;描述这些规则的工具&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;####Python 中正则的使用&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;常用方法&quot;&gt;&lt;a href=&quot;#常用方法&quot; class=&quot;headerlink&quot; title=&quot;常用方法&quot;&gt;&lt;/a&gt;常用方法&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;findall: 匹配所有符合规律的内容，以列表的方式返回&lt;/li&gt;
&lt;li&gt;Serch: 匹配并提取第一个符合规律的内容，以正则表达式对象(object)的形式返回&lt;/li&gt;
&lt;li&gt;Sub: 替换符合规律的内容，返回替换后的值&lt;h6 id=&quot;贪心和非贪心匹配&quot;&gt;&lt;a href=&quot;#贪心和非贪心匹配&quot; class=&quot;headerlink&quot; title=&quot;贪心和非贪心匹配&quot;&gt;&lt;/a&gt;贪心和非贪心匹配&lt;/h6&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.*&lt;/code&gt; 贪心 匹配尽可能多&lt;br&gt;&lt;code&gt;secret_code = &amp;#39;sdewsexxIxxdefrt12kkxxlovexx33kkxxyouxxkl&amp;#39;
...
b = re.findall(&amp;#39;xx.*xx&amp;#39;,secret_code)
print b&lt;/code&gt;&lt;br&gt;结果：多量少组合&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.*？&lt;/code&gt; 非贪心 匹配尽可能少&lt;br&gt;&lt;code&gt;c = re.findall(&amp;#39;xx.*?xx&amp;#39;,secret_code)
print c&lt;/code&gt;&lt;br&gt;结果：少量多组合&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;-&lt;code&gt;(.*?)&lt;/code&gt; 只返回括号内的数据，与上面不同 &lt;strong&gt;重要&lt;/strong&gt;&lt;br&gt;&lt;code&gt;d = re.findall(&amp;#39;xx(.*?)xx&amp;#39;,secret_code)
print d
for each in d
    print each&lt;/code&gt;&lt;br&gt;结果为： I love you 只匹配括号中即xx xx中间的字符&lt;/p&gt;
&lt;h5 id=&quot;Python-re库&quot;&gt;&lt;a href=&quot;#Python-re库&quot; class=&quot;headerlink&quot; title=&quot;Python re库&quot;&gt;&lt;/a&gt;Python re库&lt;/h5&gt;&lt;p&gt;re.py源文件 就是Python 正则表达式的源码介绍&lt;br&gt;&lt;code&gt;s = &amp;#39;&amp;#39;&amp;#39;sdfxxhello
xxfsdfxxworldxxasdf&amp;#39;&amp;#39;&amp;#39;
d = re.findall(&amp;#39;xx(.*?)xx&amp;#39;,s,re.S)
print d
结果： [&amp;#39;hello\n&amp;#39;,&amp;#39;world&amp;#39;]
**re.S：表示包含换行符的任意字符** 没有则输出：fsdf&lt;/code&gt;&lt;/p&gt;
&lt;h6 id=&quot;findall-和serach的区别&quot;&gt;&lt;a href=&quot;#findall-和serach的区别&quot; class=&quot;headerlink&quot; title=&quot;findall 和serach的区别&quot;&gt;&lt;/a&gt;findall 和serach的区别&lt;/h6&gt;&lt;p&gt;&lt;code&gt;s2 = &amp;#39;asdfxxIxx123xxlovexxdfd&amp;#39;
f = re.search(&amp;#39;xx(.*?)xx123(.*?)xx&amp;#39;,s2).group(1)
print f&lt;/code&gt;&lt;br&gt;结果是： I&lt;br&gt;&lt;code&gt;f = re.search(&amp;#39;xx(.*?)xx123(.*?)xx&amp;#39;,s2).group(2)
print f&lt;/code&gt; 结果是： love&lt;br&gt;&lt;strong&gt;group&lt;/strong&gt;代表我们匹配的括号有几个&lt;/p&gt;
&lt;p&gt;&lt;code&gt;f2 = re.findall(&amp;#39;xx(.*?)xx123(.*?)xx&amp;#39;,s2)
print f2[0][1]&lt;/code&gt;&lt;br&gt;f2在断点中调试为： &lt;code&gt;f2={list}[(&amp;#39;I&amp;#39;,&amp;#39;love&amp;#39;)]
                 0={tuple}(&amp;#39;I&amp;#39;,&amp;#39;love&amp;#39;)&lt;/code&gt;&lt;br&gt;print结果是： love&lt;/p&gt;
&lt;p&gt;&lt;em&gt;findall: 匹配所有符合的内容，返回的是list&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;search: 匹配的是第一个符合的内容，返回的是object&lt;/em&gt;&lt;br&gt;&lt;em&gt;确定只有一个内容的时候，使用search方法可以提高效率&lt;/em&gt;&lt;/p&gt;
&lt;h6 id=&quot;sub的使用&quot;&gt;&lt;a href=&quot;#sub的使用&quot; class=&quot;headerlink&quot; title=&quot;sub的使用&quot;&gt;&lt;/a&gt;sub的使用&lt;/h6&gt;&lt;p&gt;&lt;code&gt;s = &amp;#39;123abcdsdffrerg123&amp;#39;
se = re.sub(&amp;#39;123(.*?)123&amp;#39;,&amp;#39;456789123&amp;#39;,s)
print se
result : 456789123&lt;/code&gt;&lt;br&gt;analyse: 123和123之间包围的 用了括号只返回括号中内容&lt;/p&gt;
&lt;h6 id=&quot;不建议使用compile&quot;&gt;&lt;a href=&quot;#不建议使用compile&quot; class=&quot;headerlink&quot; title=&quot;不建议使用compile&quot;&gt;&lt;/a&gt;不建议使用compile&lt;/h6&gt;&lt;p&gt;compile 是先进行编译 在进行匹配&lt;br&gt;源码中 def compile中也有compile 多此一举&lt;br&gt;&lt;code&gt;pattern = &amp;#39;xx(.*?)xx&amp;#39;
new_pattern = re.compile(pattern,re.S)
output = re.findall(new_pattern,secret_code)
print output&lt;/code&gt;&lt;/p&gt;
&lt;h6 id=&quot;匹配数字&quot;&gt;&lt;a href=&quot;#匹配数字&quot; class=&quot;headerlink&quot; title=&quot;匹配数字&quot;&gt;&lt;/a&gt;匹配数字&lt;/h6&gt;&lt;p&gt;&lt;code&gt;a = &amp;#39;asdfasf1234567fasd555fas&amp;#39;
b = re.finall(&amp;#39;(/d+)&amp;#39;,a)
print b
result: [&amp;#39;1234567&amp;#39;,&amp;#39;555&amp;#39;]&lt;/code&gt;&lt;br&gt;&lt;strong&gt;‘(/d+)’&lt;/strong&gt;表示只返回括号中的内容一定要学会使用&lt;/p&gt;
&lt;h5 id=&quot;python-中正则表达式的使用&quot;&gt;&lt;a href=&quot;#python-中正则表达式的使用&quot; class=&quot;headerlink&quot; title=&quot;python 中正则表达式的使用&quot;&gt;&lt;/a&gt;python 中正则表达式的使用&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;使用findall与serach从大量文本中匹配感兴趣的内容(先抓大再抓小技巧)&lt;/li&gt;
&lt;li&gt;使用sub实现换页功能&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;正则表达式的概念和用法&quot;&gt;&lt;a href=&quot;#正则表达式的概念和用法&quot; class=&quot;headerlink&quot; title=&quot;正则表达式的概念和用法&quot;&gt;&lt;/a&gt;正则表达式的概念和用法&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;多练习，多使用，才能熟练掌握正则表达式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o9pxg8pv5.bkt.clouddn.com/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h6 id=&quot;参考链接&quot;&gt;&lt;a href=&quot;#参考链接&quot; class=&quot;headerlink&quot; title=&quot;参考链接&quot;&gt;&lt;/a&gt;参考链接&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4MjEyNTA5Mw==&amp;amp;mid=2652563938&amp;amp;idx=2&amp;amp;sn=52881e92c413cca92cdf8b1a9492a30e&amp;amp;scene=23&amp;amp;srcid=0806R6uskwun6yYYK1C8YS2o#rd&quot;&gt;Python 正则表达式学习摘要及资料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.parryqiu.com/2015/06/01/regex-lesson/&quot;&gt;正则表达式入门以及高阶视频教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/deerchao/archive/2006/08/24/zhengzhe30fengzhongjiaocheng.html#mission&quot;&gt;正则表达式30分钟入门教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gold.xitu.io/search&quot;&gt;掘金&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cuiqingcai.com/977.html&quot;&gt;Python爬虫入门七之正则表达式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;######基本概念&lt;br&gt;在编写处理字符串的程序或者网页时，需要查找某些复杂规则的字符串。&lt;br&gt;正则表达式： &lt;code&gt;描述这些规则的工具&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;####Python 中正则的使用&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="正则表达式" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>相册效果页面</title>
    <link href="http://yoursite.com/2016/07/28/%E7%9B%B8%E5%86%8C%E6%95%88%E6%9E%9C%E9%A1%B5%E9%9D%A2/"/>
    <id>http://yoursite.com/2016/07/28/相册效果页面/</id>
    <published>2016-07-28T08:45:57.000Z</published>
    <updated>2016-07-28T09:37:08.724Z</updated>
    
    <content type="html">&lt;h6 id=&quot;7-27晚上花了半个小时-百度google没解决&quot;&gt;&lt;a href=&quot;#7-27晚上花了半个小时-百度google没解决&quot; class=&quot;headerlink&quot; title=&quot;7.27晚上花了半个小时 百度google没解决&quot;&gt;&lt;/a&gt;7.27晚上花了半个小时 百度google没解决&lt;/h6&gt;&lt;p&gt;   &lt;img src=&quot;http://o9pxg8pv5.bkt.clouddn.com/London.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h6 id=&quot;7-28上午stack-overflow-python3-5操作注册表库-winreg改变winreg-一次性解决&quot;&gt;&lt;a href=&quot;#7-28上午stack-overflow-python3-5操作注册表库-winreg改变winreg-一次性解决&quot; class=&quot;headerlink&quot; title=&quot;7.28上午stack overflow, python3.5操作注册表库_winreg改变winreg,一次性解决&quot;&gt;&lt;/a&gt;7.28上午stack overflow, python3.5操作注册表库&lt;code&gt;_winreg&lt;/code&gt;改变&lt;code&gt;winreg&lt;/code&gt;,一次性解决&lt;/h6&gt;&lt;p&gt;  &lt;img src=&quot;http://o9pxg8pv5.bkt.clouddn.com/Sydney.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;结论：百度不靠谱，Google大法好&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;7-27晚上花了半个小时-百度google没解决&quot;&gt;&lt;a href=&quot;#7-27晚上花了半个小时-百度google没解决&quot; class=&quot;headerlink&quot; title=&quot;7.27晚上花了半个小时 百度google没解决&quot;&gt;&lt;/a&gt;7.27晚上花了半个小时 百
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
  </entry>
  
  <entry>
    <title>Android避免OOM(内存优化)</title>
    <link href="http://yoursite.com/2016/07/06/Android%E9%81%BF%E5%85%8DOOM-%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2016/07/06/Android避免OOM-内存优化/</id>
    <published>2016-07-06T07:22:11.000Z</published>
    <updated>2016-08-07T13:02:10.679Z</updated>
    
    <content type="html">&lt;p&gt;Android内存优化是性能优化很重要的一部分，而如何避免OOM又是内存优化的核心。&lt;/p&gt;
&lt;h2 id=&quot;Android内存管理机制&quot;&gt;&lt;a href=&quot;#Android内存管理机制&quot; class=&quot;headerlink&quot; title=&quot;Android内存管理机制&quot;&gt;&lt;/a&gt;Android内存管理机制&lt;/h2&gt;&lt;h3 id=&quot;android官网有一篇文章&quot;&gt;&lt;a href=&quot;#android官网有一篇文章&quot; class=&quot;headerlink&quot; title=&quot;android官网有一篇文章&quot;&gt;&lt;/a&gt;android官网有一篇文章&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://developer.android.com/training/articles/memory.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android是如何管理应用的进程与内存分配&lt;/a&gt;&lt;br&gt;Android系统的Dalvik虚拟机扮演了内存垃圾自动回收的角色。&lt;/p&gt;
&lt;h4 id=&quot;OOM介绍（out-of-memory-内存溢出）&quot;&gt;&lt;a href=&quot;#OOM介绍（out-of-memory-内存溢出）&quot; class=&quot;headerlink&quot; title=&quot;OOM介绍（out of memory 内存溢出）&quot;&gt;&lt;/a&gt;OOM介绍（out of memory 内存溢出）&lt;/h4&gt;&lt;p&gt;Android和java中都会出现由于不良代码引起的内存泄露，为了使Android应用程序能够快速高效的运行，Android每个应用程序都会有专门Dalvik虚拟机实例来运行，也就是每个程序都在属于自己的进程中运行。&lt;br&gt;这样，某个应用程序内存泄露仅仅只会使自己进程被kill掉不会影响其他进程（如果是system_process等系统进程出现问题，就会造成系统重启），&lt;strong&gt;另一方面&lt;/strong&gt;，系统为每一个应用程序分配了不同的内存上限，如果超过这个上限被视为内存泄露，从而被kill掉。&lt;br&gt;Dalvik Heap size因不同设备的RAM不同而有所差异，应用占用内存接近这个阀值，在尝试分配内存就会引起outofmemoryError的错误。&lt;/p&gt;
&lt;p&gt;出现OOM有几种情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;加载对象过大&lt;/li&gt;
&lt;li&gt;相应资源过多，来不及加载。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;解决这些问题，有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;内存引用上做一些处理，常用的有软引用。&lt;/li&gt;
&lt;li&gt;内存中加载图片直接在内存中做处理（如边界压缩）&lt;br&gt;这个Glide\Fresco 图片框架可能封装好了&lt;br&gt;3.动态回收内存&lt;br&gt;4.优化Delivk虚拟机的堆内存分配&lt;br&gt;5.自定义堆内存大小&lt;h4 id=&quot;共享内存&quot;&gt;&lt;a href=&quot;#共享内存&quot; class=&quot;headerlink&quot; title=&quot;共享内存&quot;&gt;&lt;/a&gt;共享内存&lt;/h4&gt;Android应用程序的进程都是从Zygote的进程fork出来的。Zygote进程在系统启动并载入通用的framework代码和资源后启动。一个新的应用程序启动，系统就会从Zygote中fork出来一个新的进程，在新的进程中加载并允许应用程序的代码。这使得大多数RAM pages被分配给framework的代码，并且RAM资源能够在应用的所有进程之间共享。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;大多数static 数据被mmapped到一个进程中，这样使得同样的数据在进程之间能够共享，而且在需要的时候能paged out.常见static 数据包括Dalvik code ,app resourecs,so 文件等。&lt;/p&gt;
&lt;p&gt;大多数情况下，Android通过显示的方式分配共享内存区域（例如ashmem或gralloc）来实现动态RAM区域能够在不同进程之间进行共享的机制。比如，Window Surface在APP和Screen Composition之间使用共享的内存，&lt;br&gt;Cursor Buffers在Content Provider与Clients之间共享内存。&lt;/p&gt;
&lt;h4 id=&quot;分配与回收内存&quot;&gt;&lt;a href=&quot;#分配与回收内存&quot; class=&quot;headerlink&quot; title=&quot;分配与回收内存&quot;&gt;&lt;/a&gt;分配与回收内存&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;每个进程的Dalvik heap都反应了使用内存的占用范围,（Dalvik Heap Size）,他可以根据需要进行增长，但是系统有一个上限。&lt;/li&gt;
&lt;li&gt;HeapSize跟实际的物理内存大小是不对等的，PSS（proportional Set Size）记录了应用程序自身占用以及和其他进程共享的内容。&lt;/li&gt;
&lt;li&gt;Android不会对heap空闲区域进行做碎片整理。系统仅仅在新的内存分配之前判断Heap的尾端剩余空间是否足够，不够就会触发gc操作，从而腾出更多空闲的内存空间。gc操作(garbage collection)也就是所谓的垃圾回收，Android在适当时候触发gc操作，将一些不再使用的对象回收，在Android高级系统针对Heap空间有一个Generational Heap Memory的模型，最近分配的对象在放在young generation区域，当停留一段时间，这个对象会被移动到old generation中，最后在移动到permanent generation区域中。系统会根据内存中不同的内存数据类型进行gc操作，young generation区域的对象更容易被销毁，而且gc操作的速度比old generation的速度要快，时间更短。&lt;br&gt;每个generation的内存区域都有固定的大小，随着新的对象陆续被分配到此区域，当这些对象的大小快达到阀门值时，就会触发gc操作。通常情况下，gc操作发生时，所有线程都是暂停的。&lt;br&gt;如何查看本机heap size:&lt;br&gt;&lt;code&gt;ActivityManager manager=(Activity)getSystemService(Context.ACTIVITY_SERVICE);
int heapsize=manager.getMemoryClass();&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;应用切换操作&quot;&gt;&lt;a href=&quot;#应用切换操作&quot; class=&quot;headerlink&quot; title=&quot;应用切换操作&quot;&gt;&lt;/a&gt;应用切换操作&lt;/h4&gt;&lt;p&gt;Android系统不会再用户切换应用的时候进行交换内存的操作，而是把不包含Foreground组件的应用进程放到LRUCache中，比如用户启动一个应用，系统会为它创建一个进程，但是当用户离开这个应用，此进程不会背立即销毁而是会放到一个Cache中，当用户切换回来够快速的恢复。&lt;/p&gt;
&lt;h4 id=&quot;发生OOM的条件&quot;&gt;&lt;a href=&quot;#发生OOM的条件&quot; class=&quot;headerlink&quot; title=&quot;发生OOM的条件&quot;&gt;&lt;/a&gt;发生OOM的条件&lt;/h4&gt;&lt;p&gt;通过不同的内存分配方式对不同的对象(bitmap,etc)进行操作因Android版本差异发生变化。&lt;br&gt;4.0以上，废除了external的计数器，类似bitmap的分配改到dalvik的Java heap(堆)中申请，只要allocated+新分配的内存&amp;gt;=getMemoryClass()就会发生OOM。(在AS memory monitor查看内存中Dalvik Heap的实时变化)&lt;/p&gt;
&lt;h4 id=&quot;如何避免OOM&quot;&gt;&lt;a href=&quot;#如何避免OOM&quot; class=&quot;headerlink&quot; title=&quot;如何避免OOM&quot;&gt;&lt;/a&gt;如何避免OOM&lt;/h4&gt;&lt;p&gt;减少OOM的第一步就是要尽量减少新分配出来的对象占用内存的大小，尽量使用更加轻量的对象。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;使用更加轻量的数据结构&lt;br&gt;考虑使用ArrayMap/SpareseArray而不是传统的HashMap等数据结构，Android系统为移动系统设计的容器ArrayMap更加高效，占用内存更少，因为HashMap需要一个额外的实例对象来记录Mapping的操作。而SparesArray高效的避免了key和value的自动装箱，而且避免了装箱后的解箱。&lt;br&gt;&lt;img src=&quot;http://o9pxg8pv5.bkt.clouddn.com/OOM1.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;关于更多ArrayMap/SparseArray的讨论，请参考&lt;a href=&quot;http://hukai.me/android-performance-patterns-season-3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://hukai.me/android-performance-patterns-season-3/&lt;/a&gt;的前三个段落&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;避免在Android中使用Enum&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;减少Bitmap对象的内存占用&lt;br&gt;Bitmap是一个消耗内存的大胖子，减少创建出来的Bitmap的内存占用很重要。一般有两种措施&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;inSampleSize:缩放比例，在把图片载入内存之前，我们需要计算一个合适的缩放比例，避免不必要的大图载入。&lt;/li&gt;
&lt;li&gt;decode format:解码格式，选择ARGB_8888/RBG_565/ARGB_4444/ALPHA_8，存在很大差异。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;使用更小的图片&lt;br&gt;在设计图片资源的时候，我们要考虑图片是否存在可以压缩的空间，是否能使用更小的图片，使用小图在xml加载资源时就不会在初始化视图因为内存不足而发生InflationException,其根本原因就是发生了OOM。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;内存对象的重复利用&quot;&gt;&lt;a href=&quot;#内存对象的重复利用&quot; class=&quot;headerlink&quot; title=&quot;内存对象的重复利用&quot;&gt;&lt;/a&gt;内存对象的重复利用&lt;/h4&gt;&lt;p&gt;Android最常用的缓存算法LRU(Least Recently Use)&lt;br&gt;&lt;img src=&quot;http://o9pxg8pv5.bkt.clouddn.com/OOM2.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;复用系统自带的资源，比如字符串、图片、动画、样式、颜色、简单布局，在应用中直接引用，减少自身负重、apk大小、减少内存的开销、复用性更好。但需要考虑版本差异。&lt;/li&gt;
&lt;li&gt;Listview和GirdView出现大量重复子组件的视图里面对ConvertView的复用。&lt;/li&gt;
&lt;li&gt;Bitmap对象的复用&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;在ListView和GridView等显示大量图片的控件里面需要使用LRU机制缓存Bitmap.&lt;/li&gt;
&lt;li&gt;利用inBitmap的高级特性提高Android系统在Bitmap分配和释放执行效率，inBitmap属性可以告知Bitmap解码器使用已经存在的内存区域而不是重新申请一块内存区域存放Bitmap,也就是新解码的Bitmap会使用之前那张bitmap在heap占用的内存区域，即使是上千张图片，也只占用屏幕能放下图片的内存&lt;h6 id=&quot;inBitmap的限制&quot;&gt;&lt;a href=&quot;#inBitmap的限制&quot; class=&quot;headerlink&quot; title=&quot;inBitmap的限制&quot;&gt;&lt;/a&gt;inBitmap的限制&lt;/h6&gt;&lt;/li&gt;
&lt;li&gt;SDK19以后：新申请的BItmap大小必须小于或等于前面赋值过的bitmap的大小&lt;/li&gt;
&lt;li&gt;新的Bitmap和原来的解码格式要相同，我们可以创建包含多种类型可以重用的bitmap对象池，这样后序的bitmap创建就可以找到合适的模板去重用。&lt;br&gt;&lt;img src=&quot;http://o9pxg8pv5.bkt.clouddn.com/OOM3.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;避免在onDraw方法里面执行对象的创建&lt;br&gt;在onDraw这种频繁调用的方法要避免对象的创建操作，因为他会迅速增加内存的使用，引起频繁的gc，甚至内存抖动&lt;br&gt;5.StringBuilder&lt;br&gt;如果代码中有大量字符串拼接操作，使用StringBuilder代替”+”&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;避免对象的内存泄露&quot;&gt;&lt;a href=&quot;#避免对象的内存泄露&quot; class=&quot;headerlink&quot; title=&quot;避免对象的内存泄露&quot;&gt;&lt;/a&gt;避免对象的内存泄露&lt;/h4&gt;&lt;p&gt;内存对象的泄露会导致不再使用的对象无法及时释放，不仅浪费了宝贵的内存空间，后续要分配内存的时候，空间不足造成OOM。这样，每级的generation会变小，gc更加容易触发，引起内存抖动，带来性能问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LeakCanary开源控件可以帮助我们发现内存泄露的问题。&lt;br&gt;介绍：&lt;a href=&quot;https://github.com/square/leakcanary&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/square/leakcanary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;中文文档 &lt;a href=&quot;http://www.liaohuqiu.net/cn/posts/leak-canary-read-me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.liaohuqiu.net/cn/posts/leak-canary-read-me/&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;注意Activity的泄露&lt;br&gt;Activity泄露是内存泄露最为严重的问题，涉及内存多，影响面广&lt;br&gt;两种情形：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;内部类引用导致Activity的泄露&lt;br&gt;典型的是Handler导致的Activity泄露，如果Handler中有延迟的任务或者等待执行的任务队列过长，很可能因为Handler继续执行造成Activity的泄露。&lt;br&gt;引用链是Looper-&amp;gt;MessageQueue-&amp;gt;Message-&amp;gt;handler-&amp;gt;Activity,解决办法是在退出UI之前执行 remove Handler消息队列中的消息与runnable对象。或者使用Static+WeakReference的方式来判断Handler和Activity之间存在引用关系。&lt;/li&gt;
&lt;li&gt;Activity Context被传递到其他实例中，可能导致自身被引用而发生泄露&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;考虑使用Application Context而不是Activity Context&lt;br&gt;除必须使用Activity Context的情况(Dialog的context必须是Activity),我们可以使用Application Context来避免Activity泄露&lt;/li&gt;
&lt;li&gt;注意临时Bitmap的及时回收&lt;br&gt;大多数情况下，我们对Bitmap对象增加缓存机制，但是有时候部分bitmap需要及时回收。比如我们临时创建的摸个相对大的bitmap对象，变换得到新的bitmap对象后，尽快回收原始的bitmap,及时释放原来的空间。&lt;/li&gt;
&lt;li&gt;注意监听器的注销&lt;br&gt;android程序里面register后要及时释放unregister那些监听器，自己手动add的listener，要记得remove这个listener.&lt;br&gt;5.注意缓存容器的对象泄露&lt;br&gt;有时候我们为了提高对象的复用性，把某些对象放到缓存容器中，如果这些对象没有及时从容器中清楚，也可能导致内存泄露，&lt;/li&gt;
&lt;li&gt;注意webview的泄露&lt;br&gt;Android不同版本对webview产生有很大差异，较为严重的问题是webview的泄露，解决办法：为webview新开一个线程，通过AIDL与主进程通信，根据业务的需要在合适的时机进行销毁，从而达到内存的释放。&lt;/li&gt;
&lt;li&gt;注意cursor对象是否关闭&lt;br&gt;我们在对数据库进行操作时，使用完cursor没有及时关闭，cursor的泄露，会对内存管理带来负面影响&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;内存使用策略优化&quot;&gt;&lt;a href=&quot;#内存使用策略优化&quot; class=&quot;headerlink&quot; title=&quot;内存使用策略优化&quot;&gt;&lt;/a&gt;内存使用策略优化&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;谨慎使用large heap&lt;br&gt;android设备由于软硬件的差异，heap阀值不同，特殊情况下可以在manifest中使用largeheap=true声明一个更大的heap空间，使用getLargeMemoryClass()来获取到这个更大的空间。但是要谨慎使用，因为额外的空间会影响到系统整体的用户体验，并且会使每次gc的运行时间更长。切换任务时性能大打折扣，large heap并不一定能获取到更大的heap.&lt;/li&gt;
&lt;li&gt;综合考虑设备内存阈值与其他因素设计合适的缓存大小&lt;br&gt;例如，在设计ListView或者GridView的Bitmap LRU缓存的时候，需要考虑的点有：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;应用程序剩下了多少可用的内存空间?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有多少图片会被一次呈现到屏幕上？有多少图片需要事先缓存好以便快速滑动时能够立即显示到屏幕？&lt;/li&gt;
&lt;li&gt;设备的屏幕大小与密度是多少? 一个xhdpi的设备会比hdpi需要一个更大的Cache来hold住同样数量的图片。&lt;/li&gt;
&lt;li&gt;不同的页面针对Bitmap的设计的尺寸与配置是什么，大概会花费多少内存？&lt;/li&gt;
&lt;li&gt;页面图片被访问的频率？是否存在其中的一部分比其他的图片具有更高的访问频繁？如果是，也许你想要保存那些最常访问的到内存中，或者为不同组别的位图(按访问频率分组)设置多个LruCache容器。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;onLowMemory() 与onTrimMemory()&lt;br&gt;Android可以在不同的应用当中随意切换。为了让background转到foreground, 每一个background都会占用一定的内存。系统会根据内存的使用情况决定回收部分background的应用内存。background的应用从暂停状态恢复到foreground，比较快，如果从kill状态恢复比较慢。&lt;/li&gt;
&lt;li&gt;资源文件需要选择合适的文件夹进行存放&lt;br&gt;我们知道hdpi/xhdpi/xxhdpi等等不同dpi的文件夹下的图片在不同的设备上会经过scale的处理。例如我们只在hdpi的目录下放置了一张100&lt;em&gt;100的图片，那么根据换算关系，xxhdpi&lt;br&gt;的手机去引用那张图片就会被拉伸到200&lt;/em&gt;200。需要注意到在这种情况下，内存占用是会显著提高的。对于不希望被拉伸的图片，需要放到assets或者nodpi的目录下。&lt;/li&gt;
&lt;li&gt;Try catch某些大内存分配的操作&lt;br&gt;在某些情况下，我们需要事先评估那些可能发生OOM的代码，对于这些可能发生OOM的代码，加入catch机制，可以考虑在catch里面尝试一次降级的内存分配操作。例如decode bitmap的时候，catch到OOM，可以尝试把采样比例再增加一倍之后，再次尝试decode。&lt;/li&gt;
&lt;li&gt;谨慎使用static对象&lt;br&gt;因为static的生命周期过长，和应用的进程保持一致，使用不当很可能导致对象泄漏，在Android中应该谨慎使用static对象。&lt;/li&gt;
&lt;li&gt;特别留意单例对象中不合理的持有&lt;br&gt;虽然单例模式简单实用，提供了很多便利性，但是因为单例的生命周期和应用保持一致，使用不合理很容易出现持有对象的泄漏。&lt;/li&gt;
&lt;li&gt;珍惜Services资源&lt;br&gt;如果你的应用需要在后台使用service，除非它被触发并执行一个任务，否则其他时候Service都应该是停止状态。另外需要注意当这个service完成任务之后因为停止service失败而引起的内存泄漏。 当你启动一个Service，系统会倾向为了保留这个Service而一直保留Service所在的进程。这使得进程的运行代价很高，因为系统没有办法把Service所占用的RAM空间腾出来让给其他组件，另外Service还不能被Paged out。这减少了系统能够存放到LRU缓存当中的进程数量，它会影响应用之间的切换效率，甚至会导致系统内存使用不稳定，从而无法继续保持住所有目前正在运行的service。 建议使用&lt;a href=&quot;http://developer.android.com/reference/android/app/IntentService.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IntentService&lt;/a&gt;，它会在处理完交代给它的任务之后尽快结束自己。更多信息，请阅读&lt;a href=&quot;http://developer.android.com/training/run-background-service/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Running in a Background Service&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;优化布局层次，减少内存消耗&lt;br&gt;越扁平化的视图布局，占用的内存就越少，效率越高。我们需要尽量保证布局足够扁平化，当使用系统提供的View无法实现足够扁平的时候考虑使用自定义View来达到目的。&lt;/li&gt;
&lt;li&gt;谨慎使用“抽象”编程&lt;br&gt;很多时候，开发者会使用抽象类作为”好的编程实践”，因为抽象能够提升代码的灵活性与可维护性。然而，抽象会导致一个显著的额外内存开销：他们需要同等量的代码用于可执行，那些代码会被mapping到内存中，因此如果你的抽象没有显著的提升效率，应该尽量避免他们。&lt;/li&gt;
&lt;li&gt;使用nano protobufs序列化数据&lt;br&gt;Protocol buffers是由Google为序列化结构数据而设计的，一种语言无关，平台无关，具有良好的扩展性。类似XML，却比XML更加轻量，快速，简单。如果你需要为你的数据实现序列化与协议化，建议使用nano protobufs。关于更多细节，请参考&lt;a href=&quot;https://android.googlesource.com/platform/external/protobuf/+/master/java/README.txt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;protobuf readme&lt;/a&gt;的”Nano version”章节。&lt;/li&gt;
&lt;li&gt;谨慎使用依赖注入框架&lt;br&gt;使用类似Guice或者RoboGuice等框架注入代码，在某种程度上可以简化你的代码。下面是使用RoboGuice前后的对比图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;13.谨慎使用多进程&lt;br&gt;使用多进程可以把应用中的部分组件运行在单独的进程当中，这样可以扩大应用的内存占用范围，但是这个技术必须谨慎使用，绝大多数应用都不应该贸然使用多进程，一方面是因为使用多进程会使得代码逻辑更加复杂，另外如果使用不当，它可能反而会导致显著增加内存。当你的应用需要运行一个常驻后台的任务，而且这个任务并不轻量，可以考虑使用这个技术。&lt;/p&gt;
&lt;p&gt;一个典型的例子是创建一个可以长时间后台播放的Music Player。如果整个应用都运行在一个进程中，当后台播放的时候，前台的那些UI资源也没有办法得到释放。类似这样的应用可以切分成2个进程：一个用来操作UI，另外一个给后台的Service。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用ProGuard来剔除不需要的代码&lt;br&gt;&lt;a href=&quot;http://developer.android.com/tools/help/proguard.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ProGuard&lt;/a&gt;能够通过移除不需要的代码，重命名类，域与方法等等对代码进行压缩，优化与混淆。使用ProGuard可以使得你的代码更加紧凑，这样能够减少mapping代码所需要的内存空间。&lt;/li&gt;
&lt;li&gt;谨慎使用第三方libraries&lt;br&gt;很多开源的library代码都不是为移动网络环境而编写的，如果运用在移动设备上，并不一定适合。即使是针对Android而设计的library，也需要特别谨慎，特别是在你不知道引入的library具体做了什么事情的时候。例如，其中一个library使用的是nano protobufs, 而另外一个使用的是micro protobufs。这样一来，在你的应用里面就有2种protobuf的实现方式。这样类似的冲突还可能发生在输出日志，加载图片，缓存等等模块里面。另外不要为了1个或者2个功能而导入整个library，如果没有一个合适的库与你的需求相吻合，你应该考虑自己去实现，而不是导入一个大而全的解决方案。&lt;/li&gt;
&lt;li&gt;考虑不同的实现方式来优化内存占用&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;写在最后：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设计风格很大程度上会影响到程序的内存与性能，相对来说，如果大量使用类似Material Design的风格，不仅安装包可以变小，还可以减少内存的占用，渲染性能与加载性能都会有一定的提升。&lt;/li&gt;
&lt;li&gt;内存优化并不就是说程序占用的内存越少就越好，如果因为想要保持更低的内存占用，而频繁触发执行gc操作，在某种程度上反而会导致应用性能整体有所下降，这里需要综合考虑做一定的权衡。&lt;/li&gt;
&lt;li&gt;Android的内存优化涉及的知识面还有很多：内存管理的细节，垃圾回收的工作原理，如何查找内存泄漏等等都可以展开讲很多。OOM是内存优化当中比较突出的一点，尽量减少OOM的概率对内存优化有着很大的意义。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;详细看郭霖的&lt;a href=&quot;http://blog.csdn.net/guolin_blog/article/details/42238633&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;分析内存的使用&lt;/a&gt;总结&lt;br&gt;胡凯大大&lt;a href=&quot;http://hukai.me/android-performance-oom/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;内存优化之OOM&lt;/a&gt;&lt;/p&gt;
&lt;!--more--&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Android内存优化是性能优化很重要的一部分，而如何避免OOM又是内存优化的核心。&lt;/p&gt;
&lt;h2 id=&quot;Android内存管理机制&quot;&gt;&lt;a href=&quot;#Android内存管理机制&quot; class=&quot;headerlink&quot; title=&quot;Android内存管理机制&quot;&gt;&lt;/a&gt;Android内存管理机制&lt;/h2&gt;&lt;h3 id=&quot;android官网有一篇文章&quot;&gt;&lt;a href=&quot;#android官网有一篇文章&quot; class=&quot;headerlink&quot; title=&quot;android官网有一篇文章&quot;&gt;&lt;/a&gt;android官网有一篇文章&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://developer.android.com/training/articles/memory.html&quot;&gt;Android是如何管理应用的进程与内存分配&lt;/a&gt;&lt;br&gt;Android系统的Dalvik虚拟机扮演了内存垃圾自动回收的角色。&lt;/p&gt;
&lt;h4 id=&quot;OOM介绍（out-of-memory-内存溢出）&quot;&gt;&lt;a href=&quot;#OOM介绍（out-of-memory-内存溢出）&quot; class=&quot;headerlink&quot; title=&quot;OOM介绍（out of memory 内存溢出）&quot;&gt;&lt;/a&gt;OOM介绍（out of memory 内存溢出）&lt;/h4&gt;&lt;p&gt;Android和java中都会出现由于不良代码引起的内存泄露，为了使Android应用程序能够快速高效的运行，Android每个应用程序都会有专门Dalvik虚拟机实例来运行，也就是每个程序都在属于自己的进程中运行。&lt;br&gt;这样，某个应用程序内存泄露仅仅只会使自己进程被kill掉不会影响其他进程（如果是system_process等系统进程出现问题，就会造成系统重启），&lt;strong&gt;另一方面&lt;/strong&gt;，系统为每一个应用程序分配了不同的内存上限，如果超过这个上限被视为内存泄露，从而被kill掉。&lt;br&gt;Dalvik Heap size因不同设备的RAM不同而有所差异，应用占用内存接近这个阀值，在尝试分配内存就会引起outofmemoryError的错误。&lt;/p&gt;
&lt;p&gt;出现OOM有几种情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;加载对象过大&lt;/li&gt;
&lt;li&gt;相应资源过多，来不及加载。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;解决这些问题，有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;内存引用上做一些处理，常用的有软引用。&lt;/li&gt;
&lt;li&gt;内存中加载图片直接在内存中做处理（如边界压缩）&lt;br&gt;这个Glide\Fresco 图片框架可能封装好了&lt;br&gt;3.动态回收内存&lt;br&gt;4.优化Delivk虚拟机的堆内存分配&lt;br&gt;5.自定义堆内存大小&lt;h4 id=&quot;共享内存&quot;&gt;&lt;a href=&quot;#共享内存&quot; class=&quot;headerlink&quot; title=&quot;共享内存&quot;&gt;&lt;/a&gt;共享内存&lt;/h4&gt;Android应用程序的进程都是从Zygote的进程fork出来的。Zygote进程在系统启动并载入通用的framework代码和资源后启动。一个新的应用程序启动，系统就会从Zygote中fork出来一个新的进程，在新的进程中加载并允许应用程序的代码。这使得大多数RAM pages被分配给framework的代码，并且RAM资源能够在应用的所有进程之间共享。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;大多数static 数据被mmapped到一个进程中，这样使得同样的数据在进程之间能够共享，而且在需要的时候能paged out.常见static 数据包括Dalvik code ,app resourecs,so 文件等。&lt;/p&gt;
&lt;p&gt;大多数情况下，Android通过显示的方式分配共享内存区域（例如ashmem或gralloc）来实现动态RAM区域能够在不同进程之间进行共享的机制。比如，Window Surface在APP和Screen Composition之间使用共享的内存，&lt;br&gt;Cursor Buffers在Content Provider与Clients之间共享内存。&lt;/p&gt;
&lt;h4 id=&quot;分配与回收内存&quot;&gt;&lt;a href=&quot;#分配与回收内存&quot; class=&quot;headerlink&quot; title=&quot;分配与回收内存&quot;&gt;&lt;/a&gt;分配与回收内存&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;每个进程的Dalvik heap都反应了使用内存的占用范围,（Dalvik Heap Size）,他可以根据需要进行增长，但是系统有一个上限。&lt;/li&gt;
&lt;li&gt;HeapSize跟实际的物理内存大小是不对等的，PSS（proportional Set Size）记录了应用程序自身占用以及和其他进程共享的内容。&lt;/li&gt;
&lt;li&gt;Android不会对heap空闲区域进行做碎片整理。系统仅仅在新的内存分配之前判断Heap的尾端剩余空间是否足够，不够就会触发gc操作，从而腾出更多空闲的内存空间。gc操作(garbage collection)也就是所谓的垃圾回收，Android在适当时候触发gc操作，将一些不再使用的对象回收，在Android高级系统针对Heap空间有一个Generational Heap Memory的模型，最近分配的对象在放在young generation区域，当停留一段时间，这个对象会被移动到old generation中，最后在移动到permanent generation区域中。系统会根据内存中不同的内存数据类型进行gc操作，young generation区域的对象更容易被销毁，而且gc操作的速度比old generation的速度要快，时间更短。&lt;br&gt;每个generation的内存区域都有固定的大小，随着新的对象陆续被分配到此区域，当这些对象的大小快达到阀门值时，就会触发gc操作。通常情况下，gc操作发生时，所有线程都是暂停的。&lt;br&gt;如何查看本机heap size:&lt;br&gt;&lt;code&gt;ActivityManager manager=(Activity)getSystemService(Context.ACTIVITY_SERVICE);
int heapsize=manager.getMemoryClass();&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;应用切换操作&quot;&gt;&lt;a href=&quot;#应用切换操作&quot; class=&quot;headerlink&quot; title=&quot;应用切换操作&quot;&gt;&lt;/a&gt;应用切换操作&lt;/h4&gt;&lt;p&gt;Android系统不会再用户切换应用的时候进行交换内存的操作，而是把不包含Foreground组件的应用进程放到LRUCache中，比如用户启动一个应用，系统会为它创建一个进程，但是当用户离开这个应用，此进程不会背立即销毁而是会放到一个Cache中，当用户切换回来够快速的恢复。&lt;/p&gt;
&lt;h4 id=&quot;发生OOM的条件&quot;&gt;&lt;a href=&quot;#发生OOM的条件&quot; class=&quot;headerlink&quot; title=&quot;发生OOM的条件&quot;&gt;&lt;/a&gt;发生OOM的条件&lt;/h4&gt;&lt;p&gt;通过不同的内存分配方式对不同的对象(bitmap,etc)进行操作因Android版本差异发生变化。&lt;br&gt;4.0以上，废除了external的计数器，类似bitmap的分配改到dalvik的Java heap(堆)中申请，只要allocated+新分配的内存&amp;gt;=getMemoryClass()就会发生OOM。(在AS memory monitor查看内存中Dalvik Heap的实时变化)&lt;/p&gt;
&lt;h4 id=&quot;如何避免OOM&quot;&gt;&lt;a href=&quot;#如何避免OOM&quot; class=&quot;headerlink&quot; title=&quot;如何避免OOM&quot;&gt;&lt;/a&gt;如何避免OOM&lt;/h4&gt;&lt;p&gt;减少OOM的第一步就是要尽量减少新分配出来的对象占用内存的大小，尽量使用更加轻量的对象。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="OOM" scheme="http://yoursite.com/tags/OOM/"/>
    
      <category term="Android优化" scheme="http://yoursite.com/tags/Android%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>美团大众点评大咖秀(2016.6.19)</title>
    <link href="http://yoursite.com/2016/06/20/my-first-blog/"/>
    <id>http://yoursite.com/2016/06/20/my-first-blog/</id>
    <published>2016-06-20T09:43:32.000Z</published>
    <updated>2016-08-07T13:04:05.382Z</updated>
    
    <content type="html">&lt;p&gt;我去听了半天课&lt;/p&gt;
&lt;p&gt;###git add详解&lt;br&gt;git add. 添加所有文件&lt;br&gt;git add -u 将所有修改或删除的文件添加到索引库&lt;br&gt;git add -i 查看所有修改或者删除但是没有被提交的文件&lt;/p&gt;
&lt;p&gt;美团IOS工程师(北航)&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/wal139491/myphoto/master/IMAG1070.jpg&quot; alt=&quot;建议&quot;&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/wal139491/myphoto/master/IMAG1071.jpg&quot; alt=&quot;新人培养&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/wal139491/myphoto/master/IMAG1069.jpg&quot; alt=&quot;经历&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;我去听了半天课&lt;/p&gt;
&lt;p&gt;###git add详解&lt;br&gt;git add. 添加所有文件&lt;br&gt;git add -u 将所有修改或删除的文件添加到索引库&lt;br&gt;git add -i 查看所有修改或者删除但是没有被提交的文件&lt;/p&gt;
&lt;p&gt;美团IOS工程师(北航)&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/wal139491/myphoto/master/IMAG1070.jpg&quot; alt=&quot;建议&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="something" scheme="http://yoursite.com/tags/something/"/>
    
  </entry>
  
</feed>
